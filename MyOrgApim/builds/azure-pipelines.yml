# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  paths:
    include:
      - MyOrgApim
  branches:
    include:
      - master

stages:
  - stage: buildstage
    displayName: Build
    jobs:
      - job: buildcontainer
        displayName: Create Container
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2 
            displayName: Login to Docker Hub
            inputs:
              command: login
              containerRegistry: xximjasonxx-dockerhub

          - task: Docker@2
            displayName: Build and Push to Docker Hub
            inputs:
              command: buildAndPush
              Dockerfile: $(Build.SourcesDirectory)/MyOrgApim/PeopleApi/Dockerfile
              buildContext: $(Build.SourcesDirectory)/MyOrgApim/PeopleApi
              repository: xximjasonxx/peopleapi
              tags: |
                $(Build.BuildId)
                latest

  - stage: deploybackend
    displayName: Deploy
    jobs:
      - job: deployappservice
        displayName: Deploy App Service
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '0.12.3'

          - task: TerraformCLI@0
            displayName: Init Terraform (App)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app'
              backendType: 'azurerm'
              backendServiceArm: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              backendAzureRmResourceGroupName: 'rg-my-training-x78s'
              backendAzureRmStorageAccountName: 'storagemytrainingx78s'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'peopleapi-state'

          - task: TerraformCLI@0
            displayName: Apply Terraform (app)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app'
              environmentServiceName: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              commandOptions: '-var "appservice_name=peopleapi" -var "build_version=$(Build.BuildId)"'

  - stage: updateapim
    displayName: APIM Update
    jobs:
      - job: checkupdate
        displayName: Wait for Backend
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              docker run xximjasonxx/versionchecker:v2 https://app-peopleapi-3s4a.azurewebsites.net/ping $(Build.BuildId) 10

      - job: updateapi
        displayName: Update APIM API
        dependsOn: [ "checkupdate" ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo 'I will start now'