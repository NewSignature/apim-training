# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  paths:
    include:
      - MyOrgApim
  branches:
    include:
      - master

stages:
  - stage: buildstage
    displayName: Build
    jobs:
      - job: buildcontainer
        displayName: Create Container
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2 
            displayName: Login to Docker Hub
            inputs:
              command: login
              containerRegistry: xximjasonxx-dockerhub

          - task: Docker@2
            displayName: Build and Push to Docker Hub
            inputs:
              command: buildAndPush
              Dockerfile: $(Build.SourcesDirectory)/MyOrgApim/PeopleApi/Dockerfile
              buildContext: $(Build.SourcesDirectory)/MyOrgApim/PeopleApi
              repository: xximjasonxx/peopleapi-dev
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: Build and Push to Docker Hub
            inputs:
              command: buildAndPush
              Dockerfile: $(Build.SourcesDirectory)/MyOrgApim/PeopleApi/Dockerfile
              buildContext: $(Build.SourcesDirectory)/MyOrgApim/PeopleApi
              repository: xximjasonxx/peopleapi-prod
              tags: |
                $(Build.BuildId)
                latest

  - stage: deploybackenddev
    displayName: Deploy Dev
    jobs:
      - job: deployappservice
        displayName: Deploy App Service
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '0.12.24'

          - task: TerraformCLI@0
            displayName: Init Terraform (App)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app'
              backendType: 'azurerm'
              backendServiceArm: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              backendAzureRmResourceGroupName: 'rg-trainingapp-dev'
              backendAzureRmStorageAccountName: 'storagetrainingadevzzj6'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'peopleapi-state'

          - task: TerraformCLI@0
            displayName: Apply Terraform (app)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app'
              environmentServiceName: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              commandOptions: '-var "appservice_name=peopleapi" -var "build_version=$(Build.BuildId)" -var "env_name=dev" -var "rg_name=rg-trainingapp-dev"'

          - script: |
              terraform state pull > terraform.tfstate
              AppServiceUrl=$(terraform output -json | jq '.appservice_url.value' -r)
              echo $AppServiceUrl
              echo "##vso[task.setvariable variable=appServiceUrl;isOutput=true]$AppServiceUrl"
            workingDirectory: $(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app
            name: tfApplyVars
            displayName: Process TF Outputs
        
      - job: checkupdate
        displayName: Wait for Backend
        dependsOn: [ "deployappservice" ]
        variables:
          - name: appServiceUrl
            value: $[ dependencies.deployappservice.outputs['tfApplyVars.appServiceUrl'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              docker run xximjasonxx/versionchecker:v4 $(appServiceUrl)/ping $(Build.BuildId) 100
            displayName: Check for New Version

      - job: updateapi
        displayName: Update APIM API
        dependsOn: [ "checkupdate", "deployappservice" ]
        variables:
          - name: appServiceUrl
            value: $[ dependencies.deployappservice.outputs['tfApplyVars.appServiceUrl'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '0.12.24'

          - task: TerraformCLI@0
            displayName: Init Terraform (api)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/apim'
              backendType: 'azurerm'
              backendServiceArm: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              backendAzureRmResourceGroupName: 'rg-trainingapp-dev'
              backendAzureRmStorageAccountName: 'storagetrainingadevzzj6'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'peopleapi-apim-state'

          - task: TerraformCLI@0
            displayName: Apply Terraform (api)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/apim'
              environmentServiceName: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              commandOptions: '-var "rg_name=rg-trainingapp-dev" -var "apim_name=apim-trainingapp-dev" -var "app_service_base_url=$(appServiceUrl)" -var "app_name=trainingapp"'

          - script: |
              terraform state pull > terraform.tfstate
              AppServiceUrl=$(terraform output -json | jq '.people_api_id.value' -r)
              echo "##vso[task.setvariable variable=peopleApiId;isOutput=true]$PeopleApiId"
            workingDirectory: $(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app
            name: tfApplyVars
            displayName: Process TF Outputs

      - job: importapidev
        displayName: Import API
        pool:
          vmImage: 'windows-latest'
          dependsOn: [ "deployappservice", "updateapi" ]
          variables:
            - name: personApiId
              value: $[ dependencies.updateapi.outputs['tfApplyVars.personApiId'] ]
            - name: appServiceUrl
              value: $[ dependencies.deployappservice.outputs['tfApplyVars.appServiceUrl'] ]
        steps:
          - task: AzurePowerShell@4
            displayName: Import API
            inputs:
              azureSubscription: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              scriptType: inlineScript
              azurePowerShellVersion: LatestVersion
              inline: |
                Install-Module -Name AzureRM.ApiManagement -Force
                $ApiMgmtContext = New-AzureRmApiManagementContext -ResourceGroupName "rg-trainingapp-dev" -ServiceName "apim-trainingapp-dev"
                Import-AzureRmApiManagementApi -Context $ApiMgmtContext -SpecificationFormat "Swagger" -SpecificationUrl "${appServiceUrl}/swagger/v1/swagger.json" -Path "people" -ApiId "${personApiId}"

  - stage: deploybackendprod
    displayName: Deploy Prod
    jobs:
      - job: deployappservice
        displayName: Deploy App Service
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '0.12.24'

          - task: TerraformCLI@0
            displayName: Init Terraform (App)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app'
              backendType: 'azurerm'
              backendServiceArm: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              backendAzureRmResourceGroupName: 'rg-trainingapp-prod'
              backendAzureRmStorageAccountName: 'storagetrainingaprodmsvs'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'peopleapi-state'

          - task: TerraformCLI@0
            displayName: Apply Terraform (app)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app'
              environmentServiceName: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              commandOptions: '-var "appservice_name=peopleapi" -var "build_version=$(Build.BuildId)" -var "env_name=prod" -var "rg_name=rg-trainingapp-prod"'

          - script: |
              terraform state pull > terraform.tfstate
              AppServiceUrl=$(terraform output -json | jq '.appservice_url.value' -r)
              echo $AppServiceUrl
              echo "##vso[task.setvariable variable=appServiceUrl;isOutput=true]$AppServiceUrl"
            workingDirectory: $(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/app
            name: tfApplyVars
            displayName: Process TF Outputs
        
      - job: checkupdate
        displayName: Wait for Backend
        dependsOn: [ "deployappservice" ]
        variables:
          - name: appServiceUrl
            value: $[ dependencies.deployappservice.outputs['tfApplyVars.appServiceUrl'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              docker run xximjasonxx/versionchecker:v4 $(appServiceUrl)/ping $(Build.BuildId) 100
            displayName: Check for New Version

      - job: updateapi
        displayName: Update APIM API
        dependsOn: [ "checkupdate", "deployappservice" ]
        variables:
          - name: appServiceUrl
            value: $[ dependencies.deployappservice.outputs['tfApplyVars.appServiceUrl'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '0.12.24'
#
          - task: TerraformCLI@0
            displayName: Init Terraform (api)
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/apim'
              backendType: 'azurerm'
              backendServiceArm: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              backendAzureRmResourceGroupName: 'rg-trainingapp-prod'
              backendAzureRmStorageAccountName: 'storagetrainingaprodmsvs'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'peopleapi-apim-state'
#
          - task: TerraformCLI@0
            displayName: Apply Terraform (api)
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/MyOrgApim/PeopleApi/infrastructure/apim'
              environmentServiceName: 'Visual Studio Professional with MSDN(aa5e6005-924a-495b-ab54-f2e5bc28b9e7)'
              commandOptions: '-var "rg_name=rg-trainingapp-prod" -var "apim_name=apim-trainingapp-prod" -var "app_service_base_url=$(appServiceUrl)" -var "app_name=trainingapp"'